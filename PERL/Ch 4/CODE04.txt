=======================================================
print 1, 2, 3, 4, sort 9, 8, 7, 6, 5;
=======================================================
$hash{fruit} = apple;
$hash{sandwich} = hamburger;
$hash{drink} = bubbly;

$hashref = \%hash;
print $hashref->{sandwich};
=======================================================
$result = $myobject->mymethod($data); 
=======================================================
$variable1 = 1;
$variable2 = 1;

print $variable2++ . "\n";
print $variable2 . "\n";
=======================================================
$variable = 'AAA';
print ++$variable . "\n";
$variable = 'bbb';
print ++$variable . "\n";
$variable = 'zzz';
print ++$variable . "\n";
=======================================================
print 2 ** 16;
=======================================================
print 2 ** -1
=======================================================
print 144 ** .5;
=======================================================
print 81 ** .25;
=======================================================
print !0;

=======================================================
$value = 3;
print -$value;
=======================================================
print ~0;
=======================================================
$variable1 = 5;
$reference = \$variable1;
print $$reference;
=======================================================
$line = ".Hello!";

if ($line =~ m/^\./) {
    print "You shouldn't start a sentence with a period!";
}
=======================================================
print 2 * 4;
=======================================================
print 2 * 3.1415926535;
=======================================================
print 16 / 4;
=======================================================
print 16 / 3;
=======================================================
use integer;

print 16 / 3;

5
=======================================================
print '-' x 30;
=======================================================
print 16 % 3;
=======================================================
use integer;

$value = 257;

while($value) {
   push @digits, (0 .. 9, a .. f)[$value % 16];
   $value /= 16;
}

while(@digits) {
   print pop @digits;
}
=======================================================
print "Hello " . "there.";
=======================================================
$hello = "Hello";
$there = "there";
print "$hello $there.";
=======================================================
print 2 << 10;
=======================================================
print 2048 >> 3;
=======================================================
print 24 & 15;
=======================================================
print sqrt 4;
=======================================================
print -e STDIN;		#Does STDIN exist?
=======================================================
print -t STDIN;		#Is it tied to a terminal?
=======================================================
print -z STDIN;		#Does it have zero size? 
=======================================================
while (<>) {
    if ($_ > 100) {
        print "Too big!\n";
    }
}
=======================================================
print "Please enter letters from k to m\n";
while (<>) {
    chop;
    if ($_ lt 'k' or $_ gt 'm') {
        print "Please enter letters from k to m\n";
    } else {
        print "Thank you - let's have another!\n";
    }
}
=======================================================
$v1 = 4;
$v2 = 5;
if ($v1 = $v2) {
    print "\$v1 = \$v2.";
}
=======================================================
print "Please type the letter y\n";
while (<>) {
    chop;
    if ($_ ne 'y') {
        print "Please type the letter y\n";
    } else {
        print "Do you always do what you're told?\n";
        exit;
    }
}
=======================================================
$v1 = 1;
$v2 = 2;

if ($v1 = $v2) {
    print "Assigned a non-zero value.";
}
=======================================================
sub eqfloat4 {return sprintf("%.4f", shift) eq sprintf("%.4f", shift)}

if (eqfloat4 1.23455, 1.23456) {
    print "Numbers are equal to four decimal places.";
}
=======================================================
$flag = 2030136;

if ($flag & 1 << 3) {
    print "The third bit is set.";
} 
else {
    print "The third bit is not set.";
}
=======================================================
print "h l o\n" | " e l ";
=======================================================
print "h l o\n" ^ " e l ";
=======================================================
print "he" | "  llo\n";
=======================================================
print "hello\n" & '______';

=======================================================
print "Please enter positive numbers up to 100\n";
while (<>) {
    chomp;
    if ($_ > 0 && $_ < 100) {
        print "Thank you - let's have another!\n";
    } else {
        print "Please enter positive numbers up to 100\n";
    }
}
=======================================================
print "Please enter numbers from 5 to 10\n";

while (<>) {
    chop;
    if ($_ < 5 || $_ > 10) {
        print "Please enter numbers from 5 to 10\n";
    } else {
        print "Thank you - let's have another!\n";
    }
}
=======================================================
$result = this($data) || that($data) 
|| die "Can't get this or that to work";
=======================================================
$value = 0;
$default = 100;
$value = $value || $default;
print $value;
=======================================================
$value = 0;
$default = 100;
$value ||= $default;
print $value;
=======================================================
for (1 .. 10) {
    print "Here we are again!\n";
}
=======================================================
while (<>) {
    print $_ >= 0 ? $_ : -$_
}
=======================================================
while (<>) {
    print $_ < 10 ? $_ : "${\((a .. f)[$_ - 10])}\n";
}
=======================================================
while (<>) {
    print $_ > 0 && $_ < 10 ? $_ : "${\($_ < 16 ? 
    (a .. f)[$_ - 10] : \"Number is not a 
    single hex digit.\")}\n";
}
=======================================================
$variable1 = 5;
print $variable1;
=======================================================
$x = $y = $z = 1;
=======================================================
$x = 2 * ($y = 2 * ($z = 1));
print join(", ", $x, $y, $z);
=======================================================
$doubleme *= 2;
=======================================================
chop ($input = <>);
=======================================================
$variable = (1, 2, 3);
print $variable;
=======================================================
@array = (1, 2, 3);
print join(", ", @array);
=======================================================
print 1, 2, 3, 4, sort 9, 8, 7, 6, 5;
=======================================================
$v1 = 1;
$v2 = 0;
$v3 = not $v1 && $v2;
if($v3) {
    print "\$v3 is true.";
}
else {
    print "\$v3 is false.";
}
=======================================================
$v1 = 1;
$v2 = 0;
$v3 = ! $v1 && $v2;
if($v3) {
    print "\$v3 is true.";
}
else {
    print "\$v3 is false.";
}
=======================================================
$v1 = 0;

@a1 = $v1 && 1 .. 10;

print join (" ", @a1);
=======================================================
$v1 = 0;

@a1 = $v1 and 1 .. 10;

print join (" ", @a1);
=======================================================
$v1 = ($v2 or $v3);            
$v1 = $v2 || $v3;              
=======================================================
while(<>) {
    print;
}
=======================================================
@all_lines =  <FILEHANDLE>;
=======================================================
while(<>) {
    print;
}
=======================================================
while(<*.h>) {
    print;
    print "\n";
}
=======================================================



