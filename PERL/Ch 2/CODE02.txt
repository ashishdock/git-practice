============================================================
$scalar1 = 5;
$scalar2 = "Hello there!";
============================================================
print ("H", "e", "l", "l", "o");
============================================================
print "H", "e", "l", "l", "o";
============================================================
$x = 100;
$y = 200;
$warning = "Do you smell smoke?";
============================================================
$x = $y = $z = 1;
print join (", ", $x, $y, $z);
============================================================
$x = $x + 2;
$x = $x - 2;
$x = $x * 5;
============================================================
$x += 2;
$x -= 2;
$x *= 5;
============================================================
($degrees += 100) *= 700;
============================================================
$degrees += 100;
$degrees *= 700;
============================================================
chop ($input = 123);
print $input;
============================================================
$variable1 = 5;
undef $variable1;
============================================================
$variable1 = 5;
undef $variable1;

if (defined $variable1) {
    print "\$variable1 is defined.\n";
} else {
    print "\$variable1 is not defined.\n";
}
============================================================
*MAXFILES = \100;
print "$MAXFILES\n";
$MAXFILES = 101;
============================================================
if ($bottom) {
    $result = $top / $bottom;
}
else {
    $ result = 0;
}
============================================================
print "Got a data value." if ($value = returnvalue($index));
============================================================
print "Got a data value." if defined($value = returnvalue($index));
============================================================
$decimal = 4;
$binary = unpack("B32", pack("N", $decimal));
print $binary;
============================================================
$decimal = 4;
$binary = unpack("B32", pack("N", $decimal));
$newdecimal = unpack("N", pack("B32", $binary));
print $newdecimal;
============================================================
$x = 1.99999;
$y = 1.00001;
print join (", ", int($x), int($y));
============================================================
print sprintf "%.2f", 3.1415926;
============================================================
$variable1 = sprintf "%.4f", 3.1415926;
print $variable1;
============================================================
$variable1 = sprintf "%.2f", 3.1415926;
============================================================
$variable1 = sprintf "%.2f", 3.1415926;
$variable1 += .01;
print $variable1;
============================================================
$variable1 = "Hello ";	
$variable2 = "there\n";
print $variable1 + $variable2;		#Does not concatinate!
============================================================
$variable1 = "Hello ";
$variable2 = "there\n";
print $variable1 . $variable2;
============================================================
$variable1 = "Hello.";
$variable2 = 'Hello again.';
============================================================
============================================================
$x = 111;
$y = "This is a string";
print '$x is in string format' if ($x & ~$x);
print '$y is in string format' if ($y & ~$y);
============================================================
$! = 1;
print "$!\n";
print "Error number " , 0 + $! , " occurred.";
============================================================
$text = "Hello";
print 'Perl says: $text!\n';
============================================================
$text = "un";
print "Don't be ${text}happy.";
============================================================
$uptime = `uptime`;
print $uptime;
============================================================
$a = "Hello";
$b = "there";
$c = "$a $b\n";
print $c;
============================================================
print "${&getmessage}";

sub getmessage {
    $msg = "Hello!";
    return "msg"
};
============================================================
$text = Hello there!;	#No good
print $text;			#Doesn't work
============================================================
$hash{name} = "George Washington";
print $hash{name};
============================================================
print qq|I said, "Hello".|;
============================================================
$statement = qq/print "Hello.";/;
eval $statement;
============================================================
$statement = q/print "Hello.";/;
eval $statement;
============================================================
($first, $second, $third, $fourth) = qw/This is a test/;
============================================================
$text = "I\ said\ \"Hello\.\"";
$text = quotemeta('I said "Hello."');
$text = "\Q'I said "Hello."'\E";
============================================================
print (1, 2, 3);
============================================================
print ((1, 2, 3), 4, 5, (6, 7), 8, 9);
============================================================
print ("a" .. "z");
============================================================
$variable1 = (a, b, c)[1];
print $variable1;
============================================================
$size = (stat("size.pl"))[7];
print "File size is $size";
============================================================
($a, $b) = ($c, $d);
============================================================
($a, $b) = ($b, $a);
============================================================
@a = (2, 4, 6);
$a = @a;
print $a;
============================================================
print join(", ", ("Nancy", "Claire", "Linda", "Sara"));
============================================================
print join (":", "12", "00", "00");
============================================================
print join ("", H, e, l, l, o);
============================================================
print split ",", "H,e,l,l,o";
============================================================
print ((split " ", "Now is the time")[3]);
============================================================
while (<>) {
    for (split) {
        if (/^\w{4}$/) {
            print "You shouldn't use four letter words.\n";
        }
    }
}
============================================================
print join(", ", (map lc, A, B, C));
============================================================
print join(", ", (map chr, 65, 66, 67));
============================================================
print join(", ", (map {2 * $_} 1, 2, 3));
============================================================
print (map "The current number is: $_\n", (1, 2, 3));
============================================================
print join(", ", (map {my $value = $_; $value += 1} 1, 2, 3));
============================================================
print grep(!/x/, a, b, x, d);

============================================================
print join(" ",(grep {!/^\w{4}$/} (qw(Here are some four letter words.))));
============================================================
@array1 = (1, 1, 1, 1);
@array2 = grep {$_ *= 2} @array1;
print @array1[1];
============================================================
@array1 = (1, 1, 1, 1);
@array2 = grep {$_ *= 2} @{[@array1]};
print @array1[1];
============================================================
@array1 = (1, 1, 1, 1);
@array2 = grep {$_} @array1;
@array2 = map {2 * $_} array2;
print @array1[1];
============================================================
print sort ("c", "b", "a");
============================================================
print sort {$a cmp $b} ("c", "b", "a");
============================================================
print sort {$b cmp $a} ("c", "b", "a");
============================================================
print sort {$a <=> $b} (3, 2, 1);
============================================================
@name = qw(soap blanket shirt pants plow);
@category = qw(home home apparel apparel farm);
@subcategory = qw(bath bedroom top bottom field);

@indices = sort {$category[$a] cmp $subcategory[$b]
    or $category[$a] cmp $subcategory[$b]} (0 .. 4);

foreach $index (@indices) {
    print "$category[$index]/$subcategory[$index]: $name[$index]\n";
}
============================================================
sub myfunction 
{
   return (shift(@_) <=> shift(@_));
}

print sort {myfunction($a, $b)} (3, 2, 1);
============================================================
print reverse (1, 2, 3);
============================================================
$a = (2, 4, 6);
============================================================


